#include <iostream>   // Підключення бібліотеки для введення/виведення даних
#include <fstream>    // Підключення бібліотеки для роботи з файлами
#include <algorithm>  // Підключення бібліотеки алгоритмів (reverse, sort)
#include <set>        // Підключення бібліотеки для роботи з множинами (multiset)
#include <limits>     // Підключення бібліотеки для обробки помилок вводу
#include <string>     // Підключення бібліотеки для роботи з рядками

using namespace std; // Дозволяє використовувати об'єкти стандартної бібліотеки без префікса std::

/*
 * Для того, аби перевірити правильність написання завдань, натисніть 4 у головному меню.
 */

// Декларація функцій
void executeTask1(); // Функція для перестановки частини масиву
void executeTask2(); // Функція для пошуку схожих стовпців у матриці
void executeTask3(); // Функція для сортування символів та обернення тексту
void showMenu(); // Функція для відображення меню програми

// ========================== Завдання 1: Обробка масиву ==========================
void executeTask1() {
    int n; // Оголошення змінної для розміру масиву
    cout << "Завдання 1: Перестановка частини масиву.\n"; // Виведення заголовку завдання
    cout << "Введіть кількість елементів масиву: "; // Запит розміру масиву
    cin >> n; // Введення розміру масиву

    float mas[100]; // Оголошення масиву з максимальним розміром 100
    cout << "Введіть елементи масиву: "; // Запит на введення елементів
    for (int i = 0; i < n; i++) { // Цикл для заповнення масиву
        cin >> mas[i]; // Введення елементів масиву
    }

    int K, L; // Змінні для збереження індексів перестановки
    cout << "Введіть K та L для перестановки (1 ≤ K < L ≤ " << n << "): "; // Запит індексів перестановки
    cin >> K >> L; // Введення K і L

    // Переставляємо частину масиву у зворотному порядку
    reverse(mas + K - 1, mas + L); 

    // Відкриття файлу для запису результату
    ofstream outputFile("array_out_n.txt"); 
    for (int i = 0; i < n; i++) { // Запис елементів у файл
        outputFile << mas[i] << " "; 
    }
    outputFile << endl; // Додаємо перехід на новий рядок у файлі
    outputFile.close(); // Закриваємо файл
    cout << "Завдання 1 виконано! Результат записано у файл array_out_n.txt.\n"; // Повідомлення про завершення
}

// ========================== Завдання 2: Аналіз матриці ==========================
void executeTask2() {
    int M, N; // Оголошення змінних для розмірів матриці
    cout << "Завдання 2: Пошук схожих стовпців у матриці.\n"; // Виведення заголовку завдання
    cout << "Введіть кількість рядків та стовпців матриці: "; // Запит розмірів
    cin >> M >> N; // Введення розмірів матриці

    int matrix[100][100]; // Оголошення двовимірного масиву з обмеженням 100x100
    cout << "Введіть елементи матриці:\n"; // Запит на введення елементів
    for (int i = 0; i < M; i++) { // Цикл по рядках
        for (int j = 0; j < N; j++) { // Цикл по стовпцях
            cin >> matrix[i][j]; // Введення елементів матриці
        }
    }

    int count = 0; // Лічильник схожих стовпців
    for (int j = 0; j < N - 1; j++) { // Перебір усіх стовпців
        for (int k = j + 1; k < N; k++) { // Перебір стовпців для порівняння
            multiset<int> set1, set2; // Використовуємо множини для порівняння
            for (int i = 0; i < M; i++) { // Заповнюємо множини значеннями з двох стовпців
                set1.insert(matrix[i][j]);
                set2.insert(matrix[i][k]);
            }
            if (set1 == set2) count++; // Якщо множини рівні — збільшуємо лічильник
        }
    }

    // Запис результату у файл
    ofstream outputFile("matr_out_n.txt");
    outputFile << "Кількість схожих стовпців: " << count << endl; 
    outputFile.close(); // Закриваємо файл
    cout << "Завдання 2 виконано! Результат записано у файл matr_out_n.txt.\n"; // Повідомлення про завершення
}

// ========================== Завдання 3: Сортування символів та обернення тексту ==========================
void executeTask3() {
    int n; // Змінна для кількості символів
    cout << "Завдання 3: Сортування символів та обернення тексту.\n"; 
    cout << "Введіть кількість символів для сортування: "; 
    cin >> n; 

    char charArray[100]; // Оголошення масиву для символів
    cout << "Введіть символи: "; 
    for (int i = 0; i < n; i++) { 
        cin >> charArray[i]; 
    }

    sort(charArray, charArray + n); // Сортуємо символи

    // Запис у файл
    ofstream outputFile("char_out_n.txt");
    for (int i = 0; i < n; i++) {
        outputFile << charArray[i] << " ";
    }
    outputFile << endl;
    outputFile.close();
    cout << "Символи відсортовано та записано у файл char_out_n.txt.\n";

    // Друга частина: обернення тексту
    cin.ignore(); // Очищення буфера
    string text;
    cout << "Введіть текст для обертання: ";
    getline(cin, text); // Введення тексту

    reverse(text.begin(), text.end()); // Обертаємо текст

    // Запис у файл
    ofstream textFile("text_out_n.txt");
    textFile << text << endl;
    textFile.close();
    cout << "Текст обернено та записано у файл text_out_n.txt.\n";
}

// ========================== Головне меню програми ==========================
void showMenu() {
    cout << "\n===== МЕНЮ =====\n"; 
    cout << "1. Завдання 1: Перестановка частини масиву\n";
    cout << "2. Завдання 2: Пошук схожих стовпців у матриці\n";
    cout << "3. Завдання 3: Сортування символів та обернення тексту\n";
    cout << "4. Вихід\n";
    cout << "Оберіть завдання (1-4): ";
}

int main() {
    int choice; 
    while (true) { 
        showMenu(); 
        cin >> choice; 

        switch (choice) { 
            case 1: executeTask1(); break; 
            case 2: executeTask2(); break; 
            case 3: executeTask3(); break; 
            case 4: cout << "Вихід з програми...\n"; return 0; 
            default: cout << "Невірний вибір! Введіть число від 1 до 4.\n"; break; 
        }
    }
}
