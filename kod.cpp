#include <iostream>  // Для введення/виведення даних
#include <fstream>   // Для роботи з файлами
#include <algorithm> // Для алгоритмів (reverse, sort)

using namespace std;  // Дозволяє використовувати стандартну бібліотеку без префікса std::

/*
 * Для того, аби перевірити правильність написання завдань, натисніть 4 у головному меню.
 */

// Декларація функцій
void executeTask1();  // Функція для перестановки частини масиву
void executeTask2();  // Функція для пошуку схожих стовпців у матриці
void executeTask3();  // Функція для сортування символів та обернення тексту
void showMenu();      // Функція для відображення меню програми

// ========================== Завдання 1: Обробка масиву ==========================
void executeTask1() {
    int n;  // Оголошення змінної для розміру масиву
    cout << "Завдання 1: Перестановка частини масиву.\n";  // Виведення заголовку завдання
    cout << "Введіть кількість елементів масиву: ";  // Запит розміру масиву
    cin >> n;  // Введення розміру масиву

    float* mas = new float[n];  // Динамічний масив для зберігання елементів
    cout << "Введіть елементи масиву: ";  // Запит на введення елементів
    for (int i = 0; i < n; i++) {  // Цикл для заповнення масиву
        cin >> mas[i];  // Введення елементів масиву
    }

    int K, L;  // Змінні для індексів перестановки
    cout << "Введіть K та L для перестановки (1 ≤ K < L ≤ " << n << "): ";  // Запит індексів
    cin >> K >> L;  // Введення K і L

    // Перестановка частини масиву у зворотному порядку
    reverse(mas + K - 1, mas + L);

    // Запис результату у файл
    ofstream outputFile("array_out.txt");
    for (int i = 0; i < n; i++) {  // Запис елементів у файл
        outputFile << mas[i] << " ";
    }
    outputFile << endl;  // Додаємо перехід на новий рядок у файлі
    outputFile.close();  // Закриваємо файл
    cout << "Завдання 1 виконано! Результат записано у файл array_out.txt.\n";  // Повідомлення про завершення

    delete[] mas;  // Звільнення пам'яті
}

// ========================== Завдання 2: Пошук схожих стовпців у матриці ==========================
void executeTask2() {
    int M, N;  // Оголошення змінних для розмірів матриці
    cout << "Завдання 2: Пошук схожих стовпців у матриці.\n";  // Виведення заголовку завдання
    cout << "Введіть кількість рядків та стовпців матриці: ";  // Запит на введення розмірів
    cin >> M >> N;  // Введення розмірів матриці

    int** matrix = new int*[M];  // Створення масиву вказівників на рядки матриці
    for (int i = 0; i < M; i++) {
        matrix[i] = new int[N];  // Виділення пам'яті для кожного рядка
    }

    cout << "Введіть елементи матриці:\n";  // Запит на введення елементів
    for (int i = 0; i < M; i++) {  // Цикл по рядках
        for (int j = 0; j < N; j++) {  // Цикл по стовпцях
            cin >> matrix[i][j];  // Введення елементів матриці
        }
    }

    int count = 0;  // Лічильник схожих стовпців
    for (int j = 0; j < N - 1; j++) {  // Перебір усіх стовпців
        for (int k = j + 1; k < N; k++) {  // Перебір стовпців для порівняння
            bool isEqual = true;
            for (int i = 0; i < M; i++) {  // Перевірка, чи рівні стовпці
                if (matrix[i][j] != matrix[i][k]) {
                    isEqual = false;
                    break;
                }
            }
            if (isEqual) count++;  // Якщо стовпці рівні — збільшуємо лічильник
        }
    }

    // Запис результату у файл
    ofstream outputFile("matr_out.txt");
    outputFile << "Кількість схожих стовпців: " << count << endl;
    outputFile.close();  // Закриваємо файл
    cout << "Завдання 2 виконано! Результат записано у файл matr_out.txt.\n";  // Повідомлення про завершення

    // Звільнення пам'яті
    for (int i = 0; i < M; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;
}

// ========================== Завдання 3: Сортування символів ==========================
void executeTask3() {
    
    string text;
    cout << "Введіть символи для сортування: ";  
    getline(cin, text);  // Зчитування всього рядка введеного користувачем

    reverse(text.begin(), text.end());  // Сортування рядка, змінюючи порядок символів на зворотний

    // Відкриття файлу для запису
    ofstream textFile("text_out.txt");  // Створення або відкриття файлу text_out.txt для запису
    textFile << text << endl;  // Запис сорторованого тексту у файл
    textFile.close();  // Закриття файлу після запису, щоб уникнути витоку ресурсів
    
    cout << "Текст сорторовано та записано у файл text_out.txt.\n";  // Виведення повідомлення про успішне виконання
}
    
// ========================== Головне меню програми ==========================
void showMenu() {
    cout << "\n===== МЕНЮ =====\n"; 
    cout << "1. Завдання 1: Перестановка частини масиву\n";
    cout << "2. Завдання 2: Пошук схожих стовпців у матриці\n";
    cout << "3. Завдання 3: Сортування символів\n";
    cout << "4. Вихід\n";
    cout << "Оберіть завдання (1-4): ";
}

int main() {
    int choice; 
    while (true) { 
        showMenu(); 
        cin >> choice; 

        switch (choice) { 
            case 1: executeTask1(); break; 
            case 2: executeTask2(); break; 
            case 3: executeTask3(); break; 
            case 4: cout << "Вихід з програми...\n"; return 0; 
            default: cout << "Невірний вибір! Введіть число від 1 до 4.\n"; break; 
        }
    }
}
